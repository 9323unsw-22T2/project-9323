Put sample API inside:

Ping:
curl --location --request GET '127.0.0.1:5000/ping'

return "pong"

Auth:
1. REGISTER
curl --location --request POST '127.0.0.1:5000/auth/register' \
--header 'Content-Type: application/json' \
--data-raw '{
  "email": "yyu1@unsw.edu.au",
  "password": "123",
  "name": "yyu"
}'

response: 
	200 ok {
    "token": "83b19d9c-728c-4415-b7b3-12a4bf58e8ec",
    "user_id": 1
} or 
	400 Email used{
		"error": "This email has been registed, please login"
	}

2. LOGIN
curl --location --request POST '127.0.0.1:5000/auth/login' \
--header 'Content-Type: application/json' \
--data-raw '{
  "email": "yyu1@unsw.edu.au",
  "password": "123"
}'

response:
	200 ok {
    "coins": 0,
    "email": "yyu@unsw.edu.au",
    "expertArea": null,
    "expertOrNot": 0,
    "id": 1,
    "isPpublic": "0",
    "name": "yyu",
    "password": "123",
    "scores": 2,
    "token": "6be47f5d-36a2-46e6-9df1-80154a9c2af3"
} or 
	400 Bad Input {
		"error": "Email and password don't match"
	}


3.
curl --location --request POST '127.0.0.1:5000/auth/logout'

response:
	200 ok {}
   
The following detail list will be change base on frontend developing.

4. expert_by_certificate   (make a user expert by certificate)
curl --location --request POST '127.0.0.1:5000/auth/expert_by_certificate' \
--header 'user_id: 1' \
--header 'token: 6be47f5d-36a2-46e6-9df1-80154a9c2af3'

response
{
    "coins": 0,
    "email": "yyu@unsw.edu.au",
    "expertArea": null,
    "expertOrNot": 1,
    "id": 1,
    "isPpublic": "0",
    "name": "yyu",
    "password": "123",
    "scores": 2,
    "token": "6be47f5d-36a2-46e6-9df1-80154a9c2af3"
}

4. INFO  (check user current info)
curl --location --request GET '127.0.0.1:5000/auth/info' \
--header 'user_id: 1' \
--header 'token: 6be47f5d-36a2-46e6-9df1-80154a9c2af3'

response
{
    "coins": 0,
    "email": "yyu@unsw.edu.au",
    "expertArea": null,
    "expertOrNot": 1,
    "id": 1,
    "isPpublic": "0",
    "name": "yyu",
    "password": "123",
    "scores": 2,
    "token": "6be47f5d-36a2-46e6-9df1-80154a9c2af3"
}


4.
curl --location --request GET '127.0.0.1:5000/auth/ping'

return "pong"


5. check authenticated decorator works
curl --location --request GET '127.0.0.1:5000/auth/auth_ping' \
--header 'token: 83b19d9c-728c-4415-b7b3-12a4bf58e8ec' \
--header 'user_id: 1'

return "pong"


6. modify info of a user
curl --location --request POST '127.0.0.1:5000/auth/info' \
--header 'user-id: 1' \
--header 'token: 5dffa235-080e-4543-a533-c3fdb3a9cb97' \
--header 'Content-Type: application/json' \
--data-raw '{
  "password": "1234",
  "name": "yyu12345",
  "photo": "some string"
}'

return 
{
    "coins": 0,
    "email": "yyu@unsw.edu.au",
    "expertArea": null,
    "expertOrNot": "0",
    "id": 1,
    "isPpublic": "0",
    "likeArticles": "[]",
    "likeQuestions": "[]",
    "messagelist": "{}",
    "name": "yyu12345",
    "photo": "some string",
    "scores": 0,
    "token": "5dffa235-080e-4543-a533-c3fdb3a9cb97"
}

Newsfeed:
1.
curl --location --request GET '127.0.0.1:5000/newsfeed/ping'
return "pong"




Article:
1.
curl --location --request GET '127.0.0.1:5000/article/ping'
return "pong"

2.  create a post. Currently the image function is under construction
curl --location --request POST '127.0.0.1:5000/article' \
--header 'user_id: 1' \
--header 'token: 861546a4-6111-409c-a533-c2d6977376cb' \
--header 'Content-Type: application/json' \
--data-raw '{
    "0": {
        "title": "this is a title",
        "step_title": "this is step_title0",
        "content": "this is a content in page 0"
    },
    "1": {
        "step_title": "this is step_title1",
        "content": {
            "type": {
                "json": "json files"
            }
        }
    }
}'

return 
{
    "article_id": 4
}

3. 
curl --location --request GET '127.0.0.1:5000/article/4' \
--header 'user_id: 1' \
--header 'token: 861546a4-6111-409c-a533-c2d6977376cb'

return
{
    "article": {
        "0": {
            "article_id": null,
            "author": 1,
            "content": "this is a content in page 0",
            "id": 4,
            "image": null,
            "is_deleted": 0,
            "reploy_ids": [],
            "step_number": 0,
            "step_title": "this is step_title0",
            "thumb_up_by": [],
            "time_created": 1657274646,
            "time_modified": 1657274646,
            "title": "this is a title"
        },
        "1": {
            "article_id": 4,
            "author": 1,
            "content": {
                "type": {
                    "json": "json files"
                }
            },
            "id": 5,
            "image": null,
            "is_deleted": 0,
            "reploy_ids": [],
            "step_number": 1,
            "step_title": "this is step_title1",
            "thumb_up_by": [],
            "time_created": 1657274646,
            "time_modified": 1657274646,
            "title": null
        }
    }
}

4. thumbup 
curl --location --request PATCH '127.0.0.1:5000/article/1/thumb_up' \
--header 'user_id: 1' \
--header 'token: bc7dfcd7-282e-419f-9809-18dec22bfa30'

curl --location --request PATCH '127.0.0.1:5000/article/1/thumb_up' \
--header 'user_id: 2' \
--header 'token: 8bec917f-f10d-460d-a7ba-ba6de50f3577'

return 
{
    "article": {
        "0": {
            "article_id": null,
            "author": 1,
            "content": "this is a content in page 0",
            "id": 1,
            "image": null,
            "is_deleted": 0,
            "reploy_ids": [],
            "step_number": 0,
            "step_title": "this is step_title0",
            "thumb_up_by": [
                1,
                2
            ],
            "time_created": 1656818607,
            "time_modified": 1656818607,
            "title": "this is a title"
        },
        "1": {
            "article_id": 1,
            "author": 1,
            "content": "this is a content in page 1",
            "id": 2,
            "image": null,
            "is_deleted": 0,
            "reploy_ids": [],
            "step_number": 1,
            "step_title": "this is step_title1",
            "thumb_up_by": [],
            "time_created": 1656818607,
            "time_modified": 1656818607,
            "title": null
        },
        "2": {
            "article_id": 1,
            "author": 1,
            "content": "this is a content in page2",
            "id": 3,
            "image": null,
            "is_deleted": 0,
            "reploy_ids": [],
            "step_number": 2,
            "step_title": "this is step_title2",
            "thumb_up_by": [],
            "time_created": 1656818607,
            "time_modified": 1656818607,
            "title": null
        }
    }
}

5. un_thumb_up
curl --location --request PATCH '127.0.0.1:5000/article/1/un_thumb_up' \
--header 'user_id: 1' \
--header 'token: bc7dfcd7-282e-419f-9809-18dec22bfa30'

{
    "article": {
        "0": {
            "article_id": null,
            "author": 1,
            "content": "this is a content in page 0",
            "id": 1,
            "image": null,
            "is_deleted": 0,
            "reploy_ids": [],
            "step_number": 0,
            "step_title": "this is step_title0",
            "thumb_up_by": [
                2
            ],
            "time_created": 1656818607,
            "time_modified": 1656818607,
            "title": "this is a title"
        },
        "1": {
            "article_id": 1,
            "author": 1,
            "content": "this is a content in page 1",
            "id": 2,
            "image": null,
            "is_deleted": 0,
            "reploy_ids": [],
            "step_number": 1,
            "step_title": "this is step_title1",
            "thumb_up_by": [],
            "time_created": 1656818607,
            "time_modified": 1656818607,
            "title": null
        },
        "2": {
            "article_id": 1,
            "author": 1,
            "content": "this is a content in page2",
            "id": 3,
            "image": null,
            "is_deleted": 0,
            "reploy_ids": [],
            "step_number": 2,
            "step_title": "this is step_title2",
            "thumb_up_by": [],
            "time_created": 1656818607,
            "time_modified": 1656818607,
            "title": null
        }
    }
}

6. Delete a article
curl --location --request DELETE '127.0.0.1:5000/article/7' \
--header 'user_id: 1' \
--header 'token: bc7dfcd7-282e-419f-9809-18dec22bfa30'

{
    "article_id": 7
}

curl --location --request GET '127.0.0.1:5000/article/7' \
--header 'user_id: 1' \
--header 'token: bc7dfcd7-282e-419f-9809-18dec22bfa30'

{
    "error": "No such article with article_id = 7"
}

前端建议api list：
127.0.0.1:5000/allquestion/<field>/<order by>/<position>
for example, when position is 1, return 1-5 qustion/answer
position is 6 return 6-10 question/answer




127.0.0.1:5000/likeguide/<guideid>
body{
  user_id
  token
}
like a guide

127.0.0.1:5000/newquestion
post a new question
body{
  description:''
  title:''
  user:''
}

127.0.0.1:5000/newguide
post a new guide
body{
  title:''
  description:''
  steps:[
    {photo:[],text:'',video:''},
    {...},
    {...}
  ]
  category:''
}


127.0.0.1:5000/followquestion/<questionid>
follow a question
body{
  user_id
  token
}

127.0.0.1:5000/likeanswer/<questionid>/<answerid>/<like or dislike>
body{
  user_id
  token
}


COMMENT:
curl --location --request POST '127.0.0.1:5000/comment/articles/<int:article_id>' \
--header 'user_id: 1' \
--header 'token: 1301ccf6-1891-42ba-8cbb-310e3bdda032' \
--header 'Content-Type: application/json' \
--data-raw '{
    "content":"this is a comment for a article"
}'

IF EXISTS:
{
    "comment_content": "this is a comment for a article",
    "comment_id": 2
}

IF THIS QUESTION NOT EXSTS
body:{
    "error": "this article can not be found"
}

curl --location --request POST '127.0.0.1:5000/comment/questions/<int:id>' \
--header 'token: 176379f7-0074-4639-bbe4-13e5a1614b25' \
--header 'user_id: 1' \
--header 'Content-Type: application/json' \
--data-raw '{
    "content":"this is a comment for a question",
    "score": 100
}'

IF EXIST THIS QUESTION and the user is expert:
{
    "comment_content": "this is a comment for a question",
    "comment_id": id
    "score": 100
}
# IF USER NOT expert(score will not be changed)
{
    "comment_content": "this is a comment for a question",
    "comment_id": id
    "score": 0
}

IF THIS QUESTION NOT EXSTS:
body:{
    "error": "this question can not be found"
}

# show all comment for a question
curl --location --request get '127.0.0.1:5000/comment/questions/<int:question_id>' \
--header 'Content-Type: application/json'
##　it will return
{
    "0": {
        "content": "this is a comment for a question",
        "id": 38,
        "thumbUpBy": null,
        "timeCreated": 1657879619,
        "timeUpdated": 1657879619,
        "user": 1
    },
    "1": {
        "content": "this is a comment for a question",
        "id": 39,
        "thumbUpBy": null,
        "timeCreated": 1657879908,
        "timeUpdated": 1657879908,
        "user": 1
    }
}

# show all comment for a article
curl --location --request get '127.0.0.1:5000/comment/questions/<int:article_id>' \
--header 'Content-Type: application/json'

## it will return
{
    "0": {
        "content": "this is a comment for a question",
        "id": 40,
        "thumbUpBy": null,
        "timeCreated": 1657879963,
        "timeUpdated": 1657879963,
        "user": 1
    },
    "1": {
        "content": "this is a comment for a question",
        "id": 41,
        "thumbUpBy": null,
        "timeCreated": 1657879967,
        "timeUpdated": 1657879967,
        "user": 1
    },
    "2": {
        "content": "this is a comment for a question",
        "id": 42,
        "thumbUpBy": null,
        "timeCreated": 1657879968,
        "timeUpdated": 1657879968,
        "user": 1
    }
}
 

 # delete comment 

 curl --location --request DELETE '127.0.0.1:5000/comment/<id:comment_id>/delete' \
--header 'token: 614ed659-6d3f-41a4-bd67-7c135645da67' \
--header 'user_id: 3' \
--header 'Content-Type: application/json' \
# no such article
{
    "error": "No such comment with comment_id = 1"
}
# if the user is not the author for this comment
{
    "error": "you can not delete this, because this is not write by you"
}
# if correct

"this article <int:article_id> has been deleted"

### same for questions and articles
# thump 
curl --location --request PATCH '127.0.0.1:5000/comment/<int:comment_id>/thumb_up' \
--header 'token: 614ed659-6d3f-41a4-bd67-7c135645da67' \
--header 'user_id: 3' \
--header 'Content-Type: application/json'

# return
{
    "like by": 3
}


# un_thumb_up
curl --location --request PATCH '127.0.0.1:5000/comment/<int:comment_id>/un_thumb_up' \
--header 'token: 614ed659-6d3f-41a4-bd67-7c135645da67' \
--header 'user_id: 3' \
--header 'Content-Type: application/json'
# return
{
    "unlike by": 3
}

# buy comment
curl --location --request POST '127.0.0.1:5000/comment/3/buy' \
--header 'token: 176379f7-0074-4639-bbe4-13e5a1614b25' \
--header 'user_id: 1' \
--header 'Content-Type: application/json' \

# if the comment is free (score = 0)
# return 

"this comment is free, no need to pay"

# if the comment's score is bigger than user?
# return

"your score is not enough to see this comment"

# if the user had bought this comment
# return

"You already bought this, please enjoy "


# if enough buy this comment
# return

"user_score":"{user_score}"


# Newsfeed＿API
## each page show how many things is in config.py : EACH_PAGE_NUMBER.


curl --location --request GET '127.0.0.1:5000/newsfeed/<int:page>' \

# if page = 1
# ATTENTION: this data is in my database, you should add data in your local database,or it will not work
{
    "0": {
        "content": "this is a content in page 0",
        "id": 2,
        "title": "this is a title",
        "type": "question"
    },
    "1": {
        "content": "this is a content in page 0",
        "id": 2,
        "title": "this is a title",
        "type": "article"
    },
    "2": {
        "content": null,
        "id": 8,
        "title": null,
        "type": "article"
    },
    "3": {
        "content": "this is a content in page 1",
        "id": 3,
        "title": null,
        "type": "question"
    },
    "4": {
        "content": null,
        "id": 7,
        "title": null,
        "type": "article"
    },
    "5": {
        "content": "this is a content in page2",
        "id": 4,
        "title": null,
        "type": "article"
    },
    "6": {
        "content": null,
        "id": 1,
        "title": null,
        "type": "question"
    },
    "7": {
        "content": "this is a content in page2",
        "id": 4,
        "title": null,
        "type": "question"
    },
    "8": {
        "content": null,
        "id": 6,
        "title": "3",
        "type": "article"
    },
    "9": {
        "content": "1",
        "id": 5,
        "title": "5",
        "type": "article"
    }
}

# if page out of the max_page.
{
    "error": "out range of pages"
}

# If you want to fresh the list.
curl --location --request POST '127.0.0.1:5000/newsfeed/fresh'

# it will return "Already freshed" . and the content already be freshed

# Trending

curl --location --request GET '127.0.0.1:5000/newsfeed/trending' \
--header 'Content-Type: application/json' \

# return
[
    {
        "answer_nums": "42",
        "content": "1414",
        "id": 3,
        "num-thum": 10,
        "thumbUpBy": "[1,2,3,3,4,5,6,7,8,9]",
        "title": "123123"
    },
    {
        "answer_nums": "15",
        "content": "123",
        "id": 1,
        "num-thum": 7,
        "thumbUpBy": "[1,3,2,4,5,6,7]",
        "title": "123"
    },
    {
        "answer_nums": "5",
        "content": "1",
        "id": 5,
        "num-thum": 2,
        "thumbUpBy": "[1,2]",
        "title": "1"
    },
    {
        "answer_nums": "23",
        "content": "34",
        "id": 2,
        "num-thum": 1,
        "thumbUpBy": "[1]",
        "title": "4343"
    },
    {
        "answer_nums": "42",
        "content": "155",
        "id": 4,
        "num-thum": 1,
        "thumbUpBy": "[3]",
        "title": "1234"
    }
]

# leaderboard
curl --location --request GET '127.0.0.1:5000/newsfeed/leaderboard' \

# return 5(if exist) top score user
[
    {
        "expertOrNot": 1,
        "id": 2,
        "name": "coko2",
        "scores": 3333
    },
    {
        "expertOrNot": "0",
        "id": 5,
        "name": "23",
        "scores": 2323
    },
    {
        "expertOrNot": "0",
        "id": 3,
        "name": null,
        "scores": 222
    },
    {
        "expertOrNot": "0",
        "id": 1,
        "name": "coko1",
        "scores": 91
    },
    {
        "expertOrNot": "0",
        "id": 6,
        "name": "323",
        "scores": 32
    }
]